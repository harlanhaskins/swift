{
  "InOutExpr": {
    "comment": [
      "An inout expression.",
      "&x"
    ],
    "kind": "Expr",
    "children": [
      {
        "Ampersand": {
          "kind": "AmpersandToken"
        }
      },
      {
        "Identifier": {
          "kind": "IdentifierToken"
        }
      }
    ]
  },
  "PoundColumnExpr": {
    "comment": [
      "A #column expression."
    ],
    "kind": "Expr",
    "children": [
      {
        "PoundColumn": {
          "kind": "PoundColumnToken"
        }
      }
    ]
  },
  "FunctionCallArgumentList": {
    "kind": "SyntaxCollection",
    "element": "FunctionCallArgument"
  },
  "TryOperator": {
    "comment": [
      "The try operator.",
      "try foo()",
      "try? foo()",
      "try! foo()"
    ],
    "kind": "Syntax",
    "children": [
      {
        "TryKeyword": {
          "kind": "TryToken"
        }
      },
      {
        "QuestionOrExclamationMark": {
          "kind": "Token",
          "optional": true,
          "choices": [
            "PostfixQuestionMarkToken",
            "ExclamationMarkToken"
          ]
        }
      }
    ]
  },
  "PoundLineExpr": {
    "comment": [
      "A #line expression."
    ],
    "kind": "Expr",
    "children": [
      {
        "PoundLine": {
          "kind": "PoundLineToken"
        }
      }
    ]
  },
  "PoundFileExpr": {
    "comment": [
      "A #file expression."
    ],
    "kind": "Expr",
    "children": [
      {
        "PoundFile": {
          "kind": "PoundFileToken"
        }
      }
    ]
  },
  "PoundFunctionExpr": {
    "comment": [
      "A #function expression."
    ],
    "kind": "Expr",
    "children": [
      {
        "PoundFunction": {
          "kind": "PoundFunctionToken"
        }
      }
    ]
  },
  "SymbolicReferenceExpr": {
    "comment": [
      "symbolic-reference-expression -> identifier generic-argument-clause?"
    ],
    "kind": "Expr",
    "children": [
      {
        "Identifier": {
          "kind": "IdentifierToken"
        }
      },
      {
        "GenericArgumentClause": {
          "kind": "GenericArgumentClause",
          "optional": true
        }
      }
    ]
  },
  "PrefixOperatorExpr": {
    "comment": [
      "A prefix operator expression.",
      "-x",
      "!true"
    ],
    "kind": "Expr",
    "children": [
      {
        "Operator": {
          "kind": "PrefixOperatorToken",
          "optional": true
        }
      },
      {
        "PostfixExpression": {
          "kind": "Expr"
        }
      }
    ]
  },
  "FloatLiteralExpr": {
    "comment": [
      "A floating-point literal",
      "4.0",
      "-3.9",
      "+4e20"
    ],
    "kind": "Expr",
    "children": [
      {
        "Sign": {
          "kind": "PrefixOperatorToken",
          "optional": true
        }
      },
      {
        "FloatingDigits": {
          "kind": "FloatingLiteralToken"
        }
      }
    ]
  },
  "FunctionCallExpr": {
    "kind": "Expr",
    "children": [
      {
        "CalledExpression": {
          "kind": "Expr"
        }
      },
      {
        "LeftParen": {
          "kind": "LeftParenToken"
        }
      },
      {
        "ArgumentList": {
          "kind": "FunctionCallArgumentList"
        }
      },
      {
        "RightParen": {
          "kind": "RightParenToken"
        }
      }
    ]
  },
  "FunctionCallArgument": {
    "comment": [
      "function-call-argument -> label? ':'? expression ','?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Label": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "Colon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "Expression": {
          "kind": "Expr"
        }
      },
      {
        "TrailingComma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "IntegerLiteralExpr": {
    "comment": [
      "An integer literal.",
      "3",
      "+3_400",
      "+0x4f"
    ],
    "kind": "Expr",
    "children": [
      {
        "Sign": {
          "kind": "PrefixOperatorToken",
          "optional": true
        }
      },
      {
        "Digits": {
          "kind": "IntegerLiteralToken"
        }
      }
    ]
  }
}