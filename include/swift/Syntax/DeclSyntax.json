{
  "TypealiasDecl": {
    "comment": [
      "typealias-declaration -> attributes? access-level-modifier? 'typealias'",
      "                         typealias-name generic-parameter-clause?",
      "                         typealias-assignment",
      "typealias-name -> identifier",
      "typealias-assignment -> = type"
    ],
    "kind": "Decl",
    "children": [
      {
        "Attributes": {
          "kind": "AttributeList",
          "optional": true
        }
      },
      {
        "AccessLevelModifier": {
          "kind": "AccessLevelModifier",
          "optional": true
        }
      },
      {
        "TypealiasKeyword": {
          "kind": "TypealiasToken"
        }
      },
      {
        "Identifier": {
          "kind": "IdentifierToken"
        }
      },
      {
        "GenericParameterClause": {
          "kind": "GenericParameterClause",
          "optional": true
        }
      },
      {
        "Equals": {
          "kind": "EqualToken"
        }
      },
      {
        "Type": {
          "kind": "Type"
        }
      }
    ]
  },
  "FunctionParameterList": {
    "kind": "SyntaxCollection",
    "element": "FunctionParameter"
  },
  "FunctionSignature": {
    "comment": [
      "function-signature ->",
      "  '(' parameter-list? ')' (throws | rethrows)? '->'? attributes? type?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "LeftParen": {
          "kind": "LeftParenToken"
        }
      },
      {
        "ParameterList": {
          "kind": "FunctionParameterList"
        }
      },
      {
        "RightParen": {
          "kind": "RightParenToken"
        }
      },
      {
        "ThrowsOrRethrowsKeyword": {
          "kind": "Token",
          "optional": true,
          "choices": [
            "ThrowsToken",
            "RethrowsToken"
          ]
        }
      },
      {
        "Arrow": {
          "kind": "ArrowToken",
          "optional": true
        }
      },
      {
        "ReturnTypeAttributes": {
          "kind": "AttributeList",
          "optional": true
        }
      },
      {
        "ReturnType": {
          "kind": "Type",
          "optional": true
        }
      }
    ]
  },
  "ElseifDirectiveClause": {
    "comment": [
      "else-if-directive-clause -> '#elseif' expr stmt-list"
    ],
    "kind": "Syntax",
    "children": [
      {
        "PoundElseif": {
          "kind": "PoundElseifToken"
        }
      },
      {
        "Condition": {
          "kind": "Expr"
        }
      },
      {
        "Body": {
          "kind": "StmtList"
        }
      }
    ]
  },
  "IfConfigDecl": {
    "comment": [
      "if-config-decl -> '#if' expr stmt-list else-if-directive-clause-list else-clause? '#endif'"
    ],
    "kind": "Decl",
    "children": [
      {
        "PoundIf": {
          "kind": "PoundIfToken"
        }
      },
      {
        "Condition": {
          "kind": "Expr"
        }
      },
      {
        "Body": {
          "kind": "StmtList"
        }
      },
      {
        "ElseifDirectiveClauses": {
          "kind": "ElseifDirectiveClauseList"
        }
      },
      {
        "ElseClause": {
          "kind": "ElseDirectiveClause",
          "optional": true
        }
      },
      {
        "PoundEndif": {
          "kind": "PoundEndifToken"
        }
      }
    ]
  },
  "StructMembers": {
    "comment": [
      "struct-members -> struct-member struct-members?",
      "struct-member -> declaration | compiler-control-statement"
    ],
    "kind": "SyntaxCollection",
    "element": "Decl"
  },
  "DeclModifier": {
    "kind": "Syntax",
    "children": [
      {
        "Name": {
          "kind": "Token",
          "text_choices": [
            "class­", "convenience­", "dynamic­", "final", "infix­", "lazy­",
            "optional­", "override­", "postfix­", "prefix­", "required­", "static­",
            "unowned­", "weak", "private", "fileprivate", "internal", "public",
            "open", "mutating­", "nonmutating­"
          ]
        }
      },
      {
        "LeftParen": {
          "kind": "LeftParenToken",
          "optional": true
        }
      },
      {
        "Argument": {
          "kind": "IdentifierToken",
          "optional": true,
          "text_choices": ["unowned", "safe", "unsafe", "set"]
        }
      },
      {
        "RightParen": {
          "kind": "RightParenToken",
          "optional": true
        }
      }
    ]
  },
  "TypeInheritanceClause": {
    "comment": [
      "type-inheritance-clause -> ':' type"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Colon": {
          "kind": "ColonToken"
        }
      },
      {
        "InheritedType": {
          "kind": "Type"
        }
      }
    ]
  },
  "StructDecl": {
    "comment": [
      "struct-declaration -> attributes? access-level-modifier?",
      "                      'struct' struct-name",
      "                      generic-parameter-clause? type-inheritance-clause?",
      "                      generic-where-clause?",
      "                      '{' struct-members ''",
      "struct-name -> identifier"
    ],
    "kind": "Decl",
    "children": [
      {
        "Attributes": {
          "kind": "AttributeList",
          "optional": true
        }
      },
      {
        "AccessLevelModifier": {
          "kind": "AccessLevelModifier",
          "optional": true
        }
      },
      {
        "StructKeyword": {
          "kind": "StructToken"
        }
      },
      {
        "Name": {
          "kind": "IdentifierToken"
        }
      },
      {
        "GenericParameterClause": {
          "kind": "GenericParameterClause",
          "optional": true
        }
      },
      {
        "InheritanceClause": {
          "kind": "TypeInheritanceClause",
          "optional": true
        }
      },
      {
        "GenericWhereClause": {
          "kind": "GenericWhereClause",
          "optional": true
        }
      },
      {
        "LeftBrace": {
          "kind": "LeftBraceToken"
        }
      },
      {
        "Members": {
          "kind": "StructMembers"
        }
      },
      {
        "RightBrace": {
          "kind": "RightBraceToken"
        }
      }
    ]
  },
  "FunctionParameter": {
    "comment": [
      "parameter ->",
      "external-parameter-name? local-parameter-name ':'",
      "  type '...'? '='? expression? ','?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "ExternalName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LocalName": {
          "kind": "IdentifierToken"
        }
      },
      {
        "Colon": {
          "kind": "ColonToken"
        }
      },
      {
        "TypeAnnotation": {
          "kind": "TypeAnnotation"
        }
      },
      {
        "Ellipsis": {
          "kind": "Token",
          "optional": true
        }
      },
      {
        "DefaultEquals": {
          "kind": "EqualToken",
          "optional": true
        }
      },
      {
        "DefaultValue": {
          "kind": "Expr",
          "optional": true
        }
      },
      {
        "TrailingComma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "ModifierList": {
    "comment": [
      "declaration-modifier -> access-level-modifier",
      "                      | mutation-modifier",
      "                      | 'class'",
      "                      | 'convenience'",
      "                      | 'dynamic'",
      "                      | 'final'",
      "                      | 'infix'",
      "                      | 'lazy'",
      "                      | 'optional'",
      "                      | 'override'",
      "                      | 'postfix'",
      "                      | 'prefix'",
      "                      | 'required'",
      "                      | 'static'",
      "                      | 'unowned'",
      "                      | 'unowned(safe)'",
      "                      | 'unowned(unsafe)'",
      "                      | 'weak'",
      "mutation-modifier -> 'mutating' | 'nonmutating'"
    ],
    "kind": "SyntaxCollection",
    "element": "Syntax",
    "element_name": "Modifier"
  },
  "FunctionDecl": {
    "kind": "Decl",
    "children": [
      {
        "Attributes": {
          "kind": "AttributeList",
          "optional": true
        }
      },
      {
        "Modifiers": {
          "kind": "ModifierList",
          "optional": true
        }
      },
      {
        "FuncKeyword": {
          "kind": "FuncToken"
        }
      },
      {
        "Identifier": {
          "kind": "IdentifierToken"
        }
      },
      {
        "GenericParameterClause": {
          "kind": "GenericParameterClause",
          "optional": true
        }
      },
      {
        "Signature": {
          "kind": "FunctionSignature"
        }
      },
      {
        "GenericWhereClause": {
          "kind": "GenericWhereClause",
          "optional": true
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      }
    ]
  },
  "ElseifDirectiveClauseList": {
    "comment": [
      "else-if-directive-clause-list -> else-if-directive-clause else-if-directive-clause-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "ElseifDirectiveClause"
  },
  "ElseDirectiveClause": {
    "comment": [
      "else-directive-clause -> '#else' stmt-list"
    ],
    "kind": "Syntax",
    "children": [
      {
        "PoundElse": {
          "kind": "PoundElseToken"
        }
      },
      {
        "Body": {
          "kind": "StmtList"
        }
      }
    ]
  },
  "AccessLevelModifier": {
    "comment": [
      "access-level-modifier -> 'private' | 'private' '(' 'set' ')'",
      "                       | 'fileprivate' | 'fileprivate' '(' 'set' ')'",
      "                       | 'internal' | 'internal' '(' 'set' ')'",
      "                       | 'public' | 'public' '(' 'set' ')'",
      "                       | 'open' | 'open' '(' 'set' ')'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Name": {
          "kind": "IdentifierToken"
        }
      },
      {
        "OpenParen": {
          "kind": "LeftParenToken",
          "optional": true
        }
      },
      {
        "Modifier": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "CloseParen": {
          "kind": "RightParenToken",
          "optional": true
        }
      }
    ]
  }
}