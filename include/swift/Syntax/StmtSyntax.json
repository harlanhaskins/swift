{
  "ContinueStmt": {
    "comment": [
      "continue-stmt -> 'continue' label? ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "ContinueKeyword": {
          "kind": "ContinueToken"
        }
      },
      {
        "Label": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "WhileStmt": {
    "comment": [
      "while-stmt -> label? ':'? 'while' condition-list code-block ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "WhileKeyword": {
          "kind": "WhileToken"
        }
      },
      {
        "Conditions": {
          "kind": "ConditionList"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "DeferStmt": {
    "comment": [
      "defer-stmt -> 'defer' code-block ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "DeferKeyword": {
          "kind": "DeferToken"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "ExpressionStmt": {
    "comment": [
      "expr-stmt -> expression ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "Expression": {
          "kind": "Expr"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "SwitchCaseList": {
    "comment": [
      "switch-case-list -> switch-case switch-case-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "SwitchCase"
  },
  "RepeatWhileStmt": {
    "comment": [
      "repeat-while-stmt -> label? ':'? 'repeat' code-block 'while' expr ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "RepeatKeyword": {
          "kind": "RepeatToken"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "WhileKeyword": {
          "kind": "WhileToken"
        }
      },
      {
        "Condition": {
          "kind": "Expr"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "GuardStmt": {
    "comment": [
      "guard-stmt -> 'guard' condition-list 'else' code-block ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "GuardKeyword": {
          "kind": "GuardToken"
        }
      },
      {
        "Conditions": {
          "kind": "ConditionList"
        }
      },
      {
        "ElseKeyword": {
          "kind": "ElseToken"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "ExprList": {
    "kind": "SyntaxCollection",
    "element": "Expr",
    "element_name": "Expression"
  },
  "WhereClause": {
    "kind": "Syntax",
    "children": [
      {
        "WhereKeyword": {
          "kind": "WhereToken"
        }
      },
      {
        "Expressions": {
          "kind": "ExprList"
        }
      }
    ]
  },
  "ForInStmt": {
    "comment": [
      "for-in-stmt -> label? ':'? 'for' 'case'? pattern 'in' expr 'where'? expr code-block ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "For": {
          "kind": "ForToken"
        }
      },
      {
        "Case": {
          "kind": "CaseToken",
          "optional": true
        }
      },
      {
        "ItemPattern": {
          "kind": "Pattern"
        }
      },
      {
        "InKeyword": {
          "kind": "InToken"
        }
      },
      {
        "CollectionExpr": {
          "kind": "Expr"
        }
      },
      {
        "WhereClause": {
          "kind": "WhereClause",
          "optional": true
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "SwitchStmt": {
    "comment": [
      "switch-stmt -> identifier? ':'? 'switch' expr '{' switch-case-list '}' ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "SwitchKeyword": {
          "kind": "SwitchToken"
        }
      },
      {
        "Expression": {
          "kind": "Expr"
        }
      },
      {
        "OpenBrace": {
          "kind": "LeftBraceToken"
        }
      },
      {
        "Cases": {
          "kind": "SwitchCaseList"
        }
      },
      {
        "CloseBrace": {
          "kind": "RightBraceToken"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "CatchClauseList": {
    "comment": [
      "catch-clause-list -> catch-clause catch-clause-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "CatchClause"
  },
  "DoStmt": {
    "comment": [
      "do-stmt -> identifier? ':'? 'do' code-block catch-clause-list ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "DoKeyword": {
          "kind": "DoToken"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "CatchClauses": {
          "kind": "CatchClauseList"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "ReturnStmt": {
    "comment": [
      "return-stmt -> 'return' expr? ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "ReturnKeyword": {
          "kind": "ReturnToken"
        }
      },
      {
        "Expression": {
          "kind": "Expr",
          "optional": true
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "FallthroughStmt": {
    "comment": [
      "fallthrough-stmt -> 'fallthrough' ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "FallthroughKeyword": {
          "kind": "FallthroughToken"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "BreakStmt": {
    "comment": [
      "break-stmt -> 'break' identifier? ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "BreakKeyword": {
          "kind": "BreakToken"
        }
      },
      {
        "Label": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "CodeBlock": {
    "comment": [
      "code-block -> '{' stmt-list '}'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "OpenBrace": {
          "kind": "LeftBraceToken"
        }
      },
      {
        "Statments": {
          "kind": "StmtList"
        }
      },
      {
        "CloseBrace": {
          "kind": "RightBraceToken"
        }
      }
    ]
  },
  "CaseItemList": {
    "comment": [
      "case-item-list -> case-item case-item-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "CaseItem"
  },
  "Condition": {
    "kind": "Syntax",
    "children": [
      {
        "Condition": {
          "kind": "Syntax"
        }
      },
      {
        "TrailingComma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "ConditionList": {
    "comment": [
      "condition-list -> condition",
      "                | condition ','? condition-list",
      "condition -> expression",
      "           | availability-condition",
      "           | case-condition",
      "           | optional-binding-condition"
    ],
    "kind": "SyntaxCollection",
    "element": "Condition"
  },
  "DeclarationStmt": {
    "comment": [
      "A declaration in statement position.",
      "struct Foo {};"
    ],
    "kind": "Stmt",
    "children": [
      {
        "Declaration": {
          "kind": "Decl"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "ThrowStmt": {
    "comment": [
      "throw-stmt -> 'throw' expr ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "ThrowKeyword": {
          "kind": "ThrowToken"
        }
      },
      {
        "Expression": {
          "kind": "Expr"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "IfStmt": {
    "comment": [
      "if-stmt -> identifier? ':'? 'if' condition-list code-block else-clause ';'?"
    ],
    "kind": "Stmt",
    "children": [
      {
        "LabelName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LabelColon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "IfKeyword": {
          "kind": "IfToken"
        }
      },
      {
        "Conditions": {
          "kind": "ConditionList"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "ElseClause": {
          "kind": "Syntax",
          "optional": true
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "ElseIfContinuation": {
    "comment": [
      "else-if-continuation -> label? ':'? 'while' condition-list code-block ';'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "IfStatement": {
          "kind": "IfStmt"
        }
      }
    ]
  },
  "ElseBlock": {
    "comment": [
      "else-clause -> 'else' code-block" 
    ],
    "kind": "Syntax",
    "children": [
      {
        "ElseKeyword": {
          "kind": "ElseToken"
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      },
      {
        "Semicolon": {
          "kind": "SemicolonToken",
          "optional": true
        }
      }
    ]
  },
  "StmtList": {
    "comment": [
      "stmt-list -> stmt stmt-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "Stmt"
  },
  "SwitchCase": {
    "comment": [
      "switch-case -> switch-case-label stmt-list",
      "             | default-label stmt-list"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Label": {
          "kind": "Syntax"
        }
      },
      {
        "Body": {
          "kind": "StmtList"
        }
      }
    ]
  },
  "SwitchDefaultLabel": {
    "comment": [
      "switch-default-label -> 'default' ':'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "DefaultKeyword": {
          "kind": "DefaultToken"
        }
      },
      {
        "Colon": {
          "kind": "ColonToken"
        }
      }
    ]
  },
  "CaseItem": {
    "comment": [
      "case-item -> pattern where-clause? ','?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Pattern": {
          "kind": "Pattern"
        }
      },
      {
        "WhereClause": {
          "kind": "WhereClause",
          "optional": true
        }
      },
      {
        "Comma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "SwitchCaseLabel": {
    "comment": [
      "switch-case-label -> 'case' case-item-list ':'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "CaseKeyword": {
          "kind": "CaseToken"
        }
      },
      {
        "CaseItems": {
          "kind": "CaseItemList"
        }
      },
      {
        "Colon": {
          "kind": "ColonToken"
        }
      }
    ]
  },
  "CatchClause": {
    "comment": [
      "catch-clause 'catch' pattern? where-clause? code-block"
    ],
    "kind": "Syntax",
    "children": [
      {
        "CatchKeyword": {
          "kind": "CatchToken"
        }
      },
      {
        "Pattern": {
          "kind": "Pattern",
          "optional": true
        }
      },
      {
        "WhereClause": {
          "kind": "WhereClause",
          "optional": true
        }
      },
      {
        "Body": {
          "kind": "CodeBlock"
        }
      }
    ]
  }
}