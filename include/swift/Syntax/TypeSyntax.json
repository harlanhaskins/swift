{
  "MetatypeType": {
    "comment": [
      "metatype-type -> type '.' 'Type'",
      "               | type '.' 'Protocol"
    ],
    "kind": "Type",
    "children": [
      {
        "BaseType": {
          "kind": "Type"
        }
      },
      {
        "Period": {
          "kind": "PeriodToken"
        }
      },
      {
        "TypeOrProtocol": {
          "kind": "IdentifierToken",
          "text_choices": [
            "Type", "Protocol"
          ]
        }
      }
    ]
  },
  "DictionaryType": {
    "comment": [
      "dictionary-type -> '[' type ':' type ']'"
    ],
    "kind": "Type",
    "children": [
      {
        "LeftSquareBracket": {
          "kind": "LeftSquareBracketToken"
        }
      },
      {
        "KeyType": {
          "kind": "Type"
        }
      },
      {
        "Colon": {
          "kind": "ColonToken"
        }
      },
      {
        "ValueType": {
          "kind": "Type"
        }
      },
      {
        "RightSquareBracket": {
          "kind": "RightSquareBracketToken"
        }
      }
    ]
  },
  "FunctionType": {
    "comment": [
      "throwing-specifier -> 'throws' | 'rethrows'",
      "function-type -> attribute-list '(' function-type-argument-list ')' throwing-specifier? '->'? type?"
    ],
    "kind": "Type",
    "children": [
      {
        "TypeAttributes": {
          "kind": "AttributeList"
        }
      },
      {
        "LeftParen": {
          "kind": "LeftParenToken"
        }
      },
      {
        "ArgumentList": {
          "kind": "FunctionTypeArgumentList"
        }
      },
      {
        "RightParen": {
          "kind": "RightParenToken"
        }
      },
      {
        "ThrowsOrRethrowsKeyword": {
          "kind": "Token",
          "choices": ["ThrowsToken", "RethrowsToken"],
          "optional": true
        }
      },
      {
        "Arrow": {
          "kind": "ArrowToken",
          "optional": true
        }
      },
      {
        "ReturnType": {
          "kind": "Type",
          "optional": true
        }
      }
    ]
  },
  "TupleType": {
    "comment": [
      "tuple-type -> '(' tuple-type-element-list ')'"
    ],
    "kind": "Type",
    "children": [
      {
        "LeftParen": {
          "kind": "LeftParenToken"
        }
      },
      {
        "TypeElementList": {
          "kind": "TupleTypeElementList"
        }
      },
      {
        "RightParen": {
          "kind": "RightParenToken"
        }
      }
    ]
  },
  "TupleTypeElement": {
    "comment": [
      "tuple-type-element -> identifier? ':'? type-annotation ','?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Label": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "Colon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "TypeAnnotation": {
          "kind": "TypeAnnotation"
        }
      },
      {
        "Comma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "ArrayType": {
    "comment": [
      "array-type -> '[' type ']'"
    ],
    "kind": "Type",
    "children": [
      {
        "LeftSquareBracket": {
          "kind": "LeftSquareBracketToken"
        }
      },
      {
        "ElementType": {
          "kind": "Type"
        }
      },
      {
        "RightSquareBracket": {
          "kind": "RightSquareBracketToken"
        }
      }
    ]
  },
  "TypeAnnotation": {
    "comment": [
      "type-annotation -> attribute-list 'inout'? type"
    ],
    "kind": "Syntax",
    "children": [
      {
        "Attributes": {
          "kind": "AttributeList"
        }
      },
      {
        "InOutKeyword": {
          "kind": "InoutToken",
          "optional": true
        }
      },
      {
        "Type": {
          "kind": "Type"
        }
      }
    ]
  },
  "ProtocolCompositionElementList": {
    "comment": [
      "protocol-composition-element-list -> protocol-composition-element protocol-composition-element-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "ProtocolCompositionElement"
  },
  "TupleTypeElementList": {
    "comment": [
      "tuple-type-element-list -> tuple-type-element tuple-type-element-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "TupleTypeElement"
  },
  "ImplicitlyUnwrappedOptionalType": {
    "comment": [
      "implicitly-unwrapped-optional-type -> type '!'"
    ],
    "kind": "Type",
    "children": [
      {
        "ValueType": {
          "kind": "Type"
        }
      },
      {
        "ExclamationMark": {
          "kind": "ExclamationMarkToken"
        }
      }
    ]
  },
  "ProtocolCompositionElement": {
    "comment": [
      "protocol-composition-element -> type-identifier '&'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "ProtocolType": {
          "kind": "TypeIdentifier"
        }
      },
      {
        "Ampersand": {
          "kind": "AmpersandToken",
          "optional": true
        }
      }
    ]
  },
  "GenericArgumentList": {
    "comment": [
      "generic-argument-list -> generic-argument generic-argument-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "GenericArgument"
  },
  "GenericArgument": {
    "comment": [
      "A generic argument.",
      "Dictionary<Int, String>",
      "           ^~~~ ^~~~~~"
    ],
    "kind": "Syntax",
    "children": [
      {
        "ArgumentType": {
          "kind": "Type"
        }
      },
      {
        "TrailingComma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "GenericArgumentClause": {
    "comment": [
      "generic-argument-clause -> '<' generic-argument-list '>'"
    ],
    "kind": "Syntax",
    "children": [
      {
        "LeftAngleBracket": {
          "kind": "LeftAngleToken"
        }
      },
      {
        "Arguments": {
          "kind": "GenericArgumentList"
        }
      },
      {
        "RightAngleBracket": {
          "kind": "RightAngleToken"
        }
      }
    ]
  },
  "FunctionTypeArgument": {
    "comment": [
      "function-type-argument -> identifier? identifier? ':' type-annotation ','?"
    ],
    "kind": "Syntax",
    "children": [
      {
        "ExternalName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "LocalName": {
          "kind": "IdentifierToken",
          "optional": true
        }
      },
      {
        "Colon": {
          "kind": "ColonToken",
          "optional": true
        }
      },
      {
        "TypeAnnotation": {
          "kind": "TypeAnnotation"
        }
      },
      {
        "TrailingComma": {
          "kind": "CommaToken",
          "optional": true
        }
      }
    ]
  },
  "OptionalType": {
    "comment": [
      "optional-type -> type '?'"
    ],
    "kind": "Type",
    "children": [
      {
        "ValueType": {
          "kind": "Type"
        }
      },
      {
        "QuestionMark": {
          "kind": "PostfixQuestionMarkToken"
        }
      }
    ]
  },
  "TypeIdentifier": {
    "comment": [
      "type-identifier -> identifier generic-argument-clause? '.'? type-identifier?"
    ],
    "kind": "Type",
    "children": [
      {
        "TypeName": {
          "kind": "IdentifierToken"
        }
      },
      {
        "GenericArgumentClause": {
          "kind": "GenericArgumentClause",
          "optional": true
        }
      },
      {
        "Period": {
          "kind": "PeriodToken",
          "optional": true
        }
      },
      {
        "TypeIdentifier": {
          "kind": "TypeIdentifier",
          "optional": true
        }
      }
    ]
  },
  "FunctionTypeArgumentList": {
    "comment": [
      "function-type-argument-list -> function-type-argument function-type-argument-list?"
    ],
    "kind": "SyntaxCollection",
    "element": "FunctionTypeArgument"
  },
  "ProtocolCompositionType": {
    "comment": [
      "protocol-composition-type -> protocol-composition-elements"
    ],
    "kind": "Type",
    "children": [
      {
        "Elements": {
          "kind": "ProtocolCompositionElementList"
        }
      }
    ]
  }
}