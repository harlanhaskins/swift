%# -*- mode: Swift -*-
%# Ignore the following admonition; it applies to the resulting .swift file only
//// Automatically Generated From SyntaxKinds.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxKinds.swift - Syntax Kind definitions -------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
%{
    from gyb_syntax_support import *
    nodes = load_all_syntax_nodes()
    grouped_nodes = { kind: [] for kind in SYNTAX_BASE_KINDS }
    for node in nodes:
        grouped_nodes[node.kind].append(node)
}%

import Foundation

enum SyntaxKind: String, Codable {
  case token = "Token"
  case unknown = "Unknown"
% for name, nodes in grouped_nodes.items():
%   for node in nodes:
  case ${node.syntax_kind} = "${node.capital_syntax_kind}"
%   end
% end

  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    let kind = try container.decode(String.self)
    self = SyntaxKind(rawValue: kind) ?? .unknown
  }

  var syntaxKind: _SyntaxBase.Type {
    switch self {
% for name, nodes in grouped_nodes.items():
%   for node in nodes:
    case .${node.syntax_kind}: return ${node.name}.self
%   end
% end
    default: return UnknownSyntax.self
    }
  }
}