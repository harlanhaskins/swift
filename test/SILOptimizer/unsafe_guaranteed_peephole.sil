// RUN: %target-sil-opt -enable-sil-verify-all -unsafe-guaranteed-peephole %s | FileCheck %s
sil_stage canonical

import Builtin
import Swift

public class Foo {
  public func beep()
}

sil @beep : $@convention(thin) () -> ()

// CHECK-LABEL: sil @testUnsafeGuaranteed_simple
// CHECK: bb0([[P:%.*]] : $Foo):
// CHECK-NOT: retain
// CHECK-NOT: unsafeGuaranteed
// CHECK:   [[M:%.*]] = class_method [[P]] : $Foo, #Foo.beep
// CHECK:   apply [[M]]([[P]])
// CHECK-NOT: release
// CHECK-NOT: unsafeGuaranteedEnd
// CHECK:   [[T:%.*]] = tuple ()
// CHECK:   return [[T]]
// CHECK: }
sil @testUnsafeGuaranteed_simple : $@convention(method) (@guaranteed Foo) -> () {
bb0(%0 : $Foo):
  strong_retain %0 : $Foo
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  strong_release %5 : $Foo
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_noretain
// CHECK: bb0([[P:%.*]] : $Foo):
// CHECK:   [[G:%.*]] = builtin "unsafeGuaranteed"
// CHECK:   [[GV:%.*]] = tuple_extract [[G]]{{.*}}, 0
// CHECK:   [[M:%.*]] = class_method [[GV]] : $Foo, #Foo.beep
// CHECK:   apply [[M]]([[GV]])
// CHECK:   release
// CHECK:   unsafeGuaranteedEnd
// CHECK:   [[T:%.*]] = tuple ()
// CHECK:   return [[T]]
// CHECK: }
sil @testUnsafeGuaranteed_noretain : $@convention(method) (@guaranteed Foo) -> () {
bb0(%0 : $Foo):
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  strong_release %5 : $Foo
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_norelease
// CHECK: bb0([[P:%.*]] : $Foo):
// CHECK:   retain [[P]]
// CHECK:   [[G:%.*]] = builtin "unsafeGuaranteed"
// CHECK:   [[GV:%.*]] = tuple_extract [[G]]{{.*}}, 0
// CHECK:   [[M:%.*]] = class_method [[GV]] : $Foo, #Foo.beep
// CHECK:   apply [[M]]([[GV]])
// CHECK:   unsafeGuaranteedEnd
// CHECK:   [[T:%.*]] = tuple ()
// CHECK:   return [[T]]
// CHECK: }
sil @testUnsafeGuaranteed_norelease : $@convention(method) (@guaranteed Foo) -> () {
bb0(%0 : $Foo):
  strong_retain %0 : $Foo
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_skip_rr
// CHECK: bb0([[P:%.*]] : $Foo, [[P2:%.*]] : $Foo):
// CHECK-NOT: retain [[P]]
// CHECK-NOT: unsafeGuaranteed
// CHECK:   retain [[P2]]
// CHECK:   [[M:%.*]] = class_method [[P]] : $Foo, #Foo.beep
// CHECK:   apply [[M]]([[P]])
// CHECK-NOT: release [[P]]
// CHECK:   release [[P2]]
// CHECK-NOT: unsafeGuaranteedEnd
// CHECK:   [[T:%.*]] = tuple ()
// CHECK:   return [[T]]
// CHECK: }
sil @testUnsafeGuaranteed_skip_rr : $@convention(method) (@guaranteed Foo, @guaranteed Foo) -> () {
bb0(%0 : $Foo, %1: $Foo):
  strong_retain %0 : $Foo
  strong_retain %1 : $Foo
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  strong_release %5 : $Foo
  strong_release %1 : $Foo
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_other_inst_between_retain
// CHECK: bb0
// CHECK:   strong_retain [[P]]
// CHECK:   cond_fail
// CHECK:   builtin "unsafeGuaranteed"
// CHECK:   class_method {{.*}} : $Foo, #Foo.beep
// CHECK:   apply
// CHECK:   strong_release
// CHECK:   builtin "unsafeGuaranteedEnd"
// CHECK: }
sil @testUnsafeGuaranteed_other_inst_between_retain: $@convention(method) (@guaranteed Foo, Builtin.Int1) -> () {
bb0(%0 : $Foo, %1 : $Builtin.Int1):
  strong_retain %0 : $Foo
  cond_fail %1 : $Builtin.Int1
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  strong_release %5 : $Foo
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_other_inst_between_release
// CHECK: bb0
// CHECK:   strong_retain [[P]]
// CHECK:   builtin "unsafeGuaranteed"
// CHECK:   class_method {{.*}} : $Foo, #Foo.beep
// CHECK:   apply
// CHECK:   strong_release
// CHECK:   cond_fail
// CHECK:   builtin "unsafeGuaranteedEnd"
// CHECK: }
sil @testUnsafeGuaranteed_other_inst_between_release: $@convention(method) (@guaranteed Foo, Builtin.Int1) -> () {
bb0(%0 : $Foo, %1 : $Builtin.Int1):
  strong_retain %0 : $Foo
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  strong_release %5 : $Foo
  cond_fail %1 : $Builtin.Int1
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: sil @testUnsafeGuaranteed_cfg
// CHECK: bb0([[P:%.*]] : $Foo):
// CHECK-NOT: retain
// CHECK-NOT: unsafeGuaranteed
// CHECK:   checked_cast_br [exact] [[P]] : $Foo to $Foo, bb1, bb3
// CHECK: bb1([[P2:%.*]] : $Foo):
// CHECK:   function_ref @beep : $@convention(thin) () -> ()
// CHECK:   %4 = apply %3() : $@convention(thin) () -> ()
// CHECK:   br bb2
// CHECK: bb2:
// CHECK-NOT: release
// CHECK-NOT: unsafeGuaranteedEnd
// CHECK:   [[T:%.*]] = tuple ()
// CHECK:   return [[T]]
// CHECK: bb3:
// CHECK:   [[M:%.*]] = class_method %0 : $Foo, #Foo.beep
// CHECK:   apply [[M]]([[P]])
// CHECK:   br bb2
// CHECK: }
sil @testUnsafeGuaranteed_cfg : $@convention(method) (@guaranteed Foo) -> () {
bb0(%0 : $Foo):
  strong_retain %0 : $Foo
  %4 = builtin "unsafeGuaranteed"<Foo>(%0 : $Foo) : $(Foo, Builtin.Int8)
  %5 = tuple_extract %4 : $(Foo, Builtin.Int8), 0
  %6 = tuple_extract %4 : $(Foo, Builtin.Int8), 1
  checked_cast_br [exact] %5 : $Foo to $Foo, bb1, bb3

bb1(%11 : $Foo):
  %12 = function_ref @beep : $@convention(thin) () -> ()
  %13 = apply %12() : $@convention(thin) () -> ()
  br bb2

bb2:
  strong_release %5 : $Foo
  %16 = builtin "unsafeGuaranteedEnd"(%6 : $Builtin.Int8) : $()
  %17 = tuple ()
  return %17 : $()

bb3:
  %19 = class_method %5 : $Foo, #Foo.beep!1 : (Foo) -> () -> () , $@convention(method) (@guaranteed Foo) -> ()
  %20 = apply %19(%5) : $@convention(method) (@guaranteed Foo) -> ()
  br bb2
}
