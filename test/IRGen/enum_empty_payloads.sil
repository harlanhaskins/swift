// RUN: %target-swift-frontend -assume-parsing-unqualified-ownership-sil -emit-ir -verify %s
sil_stage canonical

typealias Void = ()

struct Empty<T> {}

enum SinglePayload<T> {
  case A(T)
  case B(Void)
  case C(Empty<T>)
}

enum MultiPayload<T, U> {
  case A(T)
  case B(U)
  case C(Void)
  case D(Void)
  case E(Empty<T>)
  case F(Empty<U>)
}

sil @project_empty_payloads_single : $@convention(thin) <T> (@in SinglePayload<T>) -> () {
entry(%0 : $*SinglePayload<T>):
  %1 = init_enum_data_addr %0 : $*SinglePayload<T>, #SinglePayload.B!enumelt.uncurried
  %2 = init_enum_data_addr %0 : $*SinglePayload<T>, #SinglePayload.C!enumelt.uncurried

  %3 = unchecked_take_enum_data_addr %0 : $*SinglePayload<T>, #SinglePayload.B!enumelt.uncurried
  %4 = unchecked_take_enum_data_addr %0 : $*SinglePayload<T>, #SinglePayload.C!enumelt.uncurried

  return undef : $()
}

sil @project_empty_payloads_multi : $@convention(thin) <T, U> (@in MultiPayload<T, U>) -> () {
entry(%0 : $*MultiPayload<T, U>):
  %1 = init_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.C!enumelt.uncurried
  %2 = init_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.D!enumelt.uncurried
  %3 = init_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.E!enumelt.uncurried
  %4 = init_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.F!enumelt.uncurried

  %5 = unchecked_take_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.C!enumelt.uncurried
  %6 = unchecked_take_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.D!enumelt.uncurried
  %7 = unchecked_take_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.E!enumelt.uncurried
  %8 = unchecked_take_enum_data_addr %0 : $*MultiPayload<T, U>, #MultiPayload.F!enumelt.uncurried

  return undef : $()
}
